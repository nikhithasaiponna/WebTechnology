/// <reference path="vswd-ext_2.2.js" />
Ext.namespace('PayStubLayoutEditor', 'PayStubLayoutEditor.dd');

PayStubLayoutEditor._payStubLayoutId = null;

var _dropTarget = 'tempid'; //This is the element that the dragged element is being dropped onto
var _dragParent = null; //This is the element that is being dragged (not the proxy but the actual element) and is set in onInitDrag

PayStubLayoutEditor.dd = function () {
    // do NOT access DOM from here; elements don't exist yet

    // private variables
    var dropHandled = false;

    return {
        // public methods
        init: function () {
            // add a "onhover" CSS class to each pay stub accumulator that the user can move
            Ext.select('.PayStubItem').each(function (el) {
                Ext.get(el.dom.id).addCls('dd-item-normal'); // has a white border so divs don't jump in "onhover"
                Ext.get(el.dom.id).addClsOnOver('dd-item-hover');
            });

            // Define the draggable pay stub accumulators  
            var dragZone1;
            Ext.select('.PayStubItem').each(function (el) {
                dragZone1 = new PayStubLayoutEditor.dd.MyDragZone(el, { ddGroup: 'paystub', scroll: false, ignoreSelf: false });
            });

            // Define where the draggable pay stub accumulators can be dropped
            var dropTarget;
            Ext.select('.SelectedPayStubItem').each(function (el) {
                dropTarget = new PayStubLayoutEditor.dd.MyDropTarget(el, { ddGroup: 'paystub', overClass: 'dd-over', isTarget: true });
            });

            Ext.select('.PayStubSectionAccumulatorsCls, .PayStubToDelete').each(function (el) {
                dropTarget = new PayStubLayoutEditor.dd.MyDropTarget(el, { ddGroup: 'paystub', overClass: 'dd-over' });
            });
        }
    };
} ();

//Helper function for removing drop preview elements from the DOM.
PayStubLayoutEditor.removePreview = function () {
    //Remove any existing preview elements from the DOM
    var preEl = Ext.get('ddpreview');

    if (preEl) {
        preEl.remove();
    }
};

//Helper function for removing  dd-preview_to_delete class to elements from the DOM.
PayStubLayoutEditor.removeDeleteCls = function () {
    //Remove any existing preview elements from the DOM
    Ext.select('.dd-preview_to_delete').each(function (el) {
        el.removeCls('dd-preview_to_delete');
    });
};

// This function creates the basic preview element in the position where 
// the dropped element would appear if dropped
PayStubLayoutEditor.createPreview = function(dragEl) {
    //Create a new preview element that will be added to the DOM
    var preEl = document.createElement('div');

    //Setup the new preview element to be the same size as the drag element
    preEl.className = 'dd-preview';
    preEl.style.width = '100%';
    preEl.style.height = '1px';
    preEl.style.backgroundColor = '#fff';

    preEl.id = 'ddpreview';

    return preEl;
};

//This function adds a drop preview to the DOM when you move in to a drop target.
PayStubLayoutEditor.createEnterPreview = function (parentEl, dragEl, targetEl) {
    if (_dropTarget.id != targetEl.id
            && !targetEl.hasCls('PayStubSectionAccumulatorsCls')) {
        //Remove any existing preview elements
        PayStubLayoutEditor.removePreview();

        //Remove Delete class
        PayStubLayoutEditor.removeDeleteCls();

        //Create a new preview element that will be added to the DOM
        var preEl = PayStubLayoutEditor.createPreview(dragEl);

        //Set the default droptarget as the element we are currently over
        _dropTarget = targetEl;

        //Insert the new preview element and set the droptarget:
        if (targetEl.hasCls('PayStubItem')) {
            //Insert before the pay stub accumulator we are currently over
            targetEl.insertSibling(preEl, 'before', true);

        }
        else if (targetEl.hasCls('PayStubSectionAccumulatorsCls')) {
            //At the end of the current pay stub section	    
            if (_dropTarget.last() === null) {
                //This is a pay stub section without any pay stub accumulators in it
                _dropTarget.insertFirst(preEl, 'after', true);
            }
            else {
                _dropTarget.last().insertSibling(preEl, 'after', true);
            }
        }
        else if (targetEl.hasCls('PayStubToDelete')) {
            targetEl.addCls('dd-preview_to_delete');
        }
    }
};

PayStubLayoutEditor.onMouseOver = function (el) {
    this.addCls('dd-item-hover');
}

PayStubLayoutEditor.onMouseOut = function (el) {
    this.removeClass('dd-item-hover');
}

// Create MyDragZone object
PayStubLayoutEditor.dd.MyDragZone = function(el, config) {
    config = config || {};
    Ext.apply(config, {
        ddel: document.createElement('div')
    });
    PayStubLayoutEditor.dd.MyDragZone.superclass.constructor.call(this, el, config);
};

// Create MyDropTarget object
PayStubLayoutEditor.dd.MyDropTarget = function(el, config) {
    PayStubLayoutEditor.dd.MyDropTarget.superclass.constructor.call(this, el, config);
};

// Extend Ext.dd.DragZone functionality
Ext.extend(PayStubLayoutEditor.dd.MyDragZone, Ext.dd.DragZone, {
    getDragData: function (e) {
        var target = Ext.get(e.getTarget());
        if (target.hasCls('leftDropZone')) {
            return false;
        }
        return { ddel: this.ddel, item: target };
    },

    onInitDrag: function () {
        dragEl = Ext.get(this.id);
        var parentEl = dragEl.findParent('div', null, true);

        this.ddel.innerHTML = dragEl.dom.innerHTML;
        this.ddel.className = this.dragData.item.dom.className;
        this.ddel.style.width = dragEl.getWidth() + "px";
        this.ddel.style.height = "25px";
        this.proxy.update(this.ddel);

        _dragParent = dragEl;
        //_dragParent.setVisibilityMode(Ext.Element.DISPLAY);
        //_dragParent.hide();
        _dragParent.addCls('dd-item-being-dragged');
        PayStubLayoutEditor.dropHandled = false;
    },

    //This function creates the drop preview element in response
    //to a drag operation moving into a element.
    onDragEnter: function (e, targetId) {
        //Get the element we are dragging over and set the global dropTarget var
        var target = Ext.get(targetId);

        //Get the element that is being dragged
        var dragEl = Ext.get(this.getDragEl());
        PayStubLayoutEditor.createEnterPreview(_dragParent, dragEl, target);
    },

    //This function creates the drop preview element in reponse to a drag
    //operation moving out of an element.
    onDragOut: function (e, targetId) {
        var target = Ext.get(targetId);
        this.lastTarget = null;

        //Get the element that is being dragged
        var dragEl = Ext.get(this.getDragEl());
        //Create the preview
        //this methos is removed because it causes the preview object to be created twice.
        //PayStubLayoutEditor.createOutPreview(_dragParent, dragEl);
    },

    //This is called when and item is dropped on an area with no drop target 
    onInvalidDrop: function (e) {
        if (_dragParent !== null) _dragParent.show();
        this.hideProxy();
        PayStubLayoutEditor.removePreview();
        if (_dragParent) {
            _dragParent.removeCls('dd-item-being-dragged');
        }
    },

    getRepairXY: function (e, data) {
        data.item.highlight('#e8edff');
        return data.item.getXY();
    }
});

PayStubLayoutEditor.DroppedOnDeleteZoneValidation = function (DropTarget) {
    var isDroppedOnDeleteZone = false;
    var parentEl = Ext.get(DropTarget).getParent();
    if (parentEl && Ext.get(DropTarget).getParent().hasCls('PayrollAccumulatorsList') || Ext.get(DropTarget).hasCls('PayrollAccumulatorsList'))
        isDroppedOnDeleteZone = true;
    return isDroppedOnDeleteZone;
};

// Defines what action to take when a draggable element has been
// dropped on a target
Ext.extend(PayStubLayoutEditor.dd.MyDropTarget, Ext.dd.DropTarget, {
    notifyDrop: function(dd, e, data) {
        if (_dropTarget != null) {
            this.el = _dropTarget;
        }
        
        if (PayStubLayoutEditor._payStubLayoutId != null && !PayStubLayoutEditor.dropHandled) {
            var draggedPayrollAccumulatorCode = dd._domRef.getAttribute('paystubitem');
            var draggedFromAnotherPayStubSection = dd.el.hasCls('SelectedPayStubItem');
            var draggedElId = dd.id;
            var dropElId = _dropTarget.id;
            var droppedOnAnotherPayStubItem = _dropTarget.hasCls('PayStubItem');
            var droppedOnDeleteZone = _dropTarget.hasCls('PayStubToDelete') ? true : PayStubLayoutEditor.DroppedOnDeleteZoneValidation(e.target);

            __doPostBack(PayStubLayoutEditor._payStubLayoutId, draggedPayrollAccumulatorCode + ',' + draggedFromAnotherPayStubSection + ',' + droppedOnAnotherPayStubItem + ',' + draggedElId + ',' + dropElId + ',' + droppedOnDeleteZone);
            PayStubLayoutEditor.dropHandled = true;
            return true;
        } else {
            if (_dragParent !== null) _dragParent.show();
            PayStubLayoutEditor.dropHandled = true;
            return false;
        }
    }
});
